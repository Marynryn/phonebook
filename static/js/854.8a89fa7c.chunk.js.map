{"version":3,"file":"static/js/854.8a89fa7c.chunk.js","mappings":"kMACA,EAAqD,uBAArD,EAA2H,+BAA3H,EAAkK,yBAAlK,EAAkM,wBAAlM,EAAmO,0BAAnO,EAA8Q,kC,6BC4D9Q,EAvDkB,WAGd,IAAMA,GAAWC,EAAAA,EAAAA,MAEXC,GAAUC,EAAAA,EAAAA,MACVC,GAAaD,EAAAA,EAAAA,MAcnB,OACIE,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAmBC,UAC/BH,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAQC,UAIpBC,EAAAA,EAAAA,MAAA,QAAMC,SAnBG,SAACC,GAClBA,EAAMC,iBACN,IAAMC,EAAOF,EAAMG,cAEbC,EAAO,CACTC,MAAOH,EAAKI,SAASD,MAAME,MAC3BC,SAAUN,EAAKI,SAASE,SAASD,OAGrClB,GAASoB,EAAAA,EAAAA,IAAML,IAEfF,EAAKQ,OACT,EAOyCb,SAAA,EACzBC,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAASC,SAAA,EACrBH,EAAAA,EAAAA,KAAA,MAAIC,UAAWC,EAAgBC,SAAC,WAEhCH,EAAAA,EAAAA,KAAA,SAAOC,UAAWC,EAAWe,KAAK,QAC9BC,KAAK,QAELC,GAAItB,EACJuB,UAAQ,QAGhBhB,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAASC,SAAA,EACrBH,EAAAA,EAAAA,KAAA,MAAIC,UAAWC,EAAgBC,SAAC,cAEhCH,EAAAA,EAAAA,KAAA,SAAOC,UAAWC,EAAWe,KAAK,OAC9BC,KAAK,WAAWC,GAAIpB,EAEpBqB,UAAQ,QAGhBpB,EAAAA,EAAAA,KAAA,UAAQC,UAAWC,EAAYe,KAAK,SAAQd,SAAC,kBAOjE,EClDA,EANc,WACV,OACIH,EAAAA,EAAAA,KAACqB,EAAS,GAElB,C,wDCNO,IAkBIvB,EAAS,WAAH,IAAIwB,EAAIC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAAE,OAC5BG,OAAOC,gBAAgB,IAAIC,WAAWN,IAAOO,QAAO,SAACV,EAAIW,GAWvD,OAREX,IAFFW,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGV,GAAG,GAAG,C","sources":["webpack://react-homework-template/./src/components/LoginForm/LoginForm.module.css?4ac5","components/LoginForm/LoginForm.jsx","pages/Login/Login.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"LoginForm_form__gPEx5\",\"box\":\"LoginForm_box__eEt8j\",\"title\":\"LoginForm_title__5FilZ\",\"title_input\":\"LoginForm_title_input__RNTKe\",\"input\":\"LoginForm_input__aQRtt\",\"wrap\":\"LoginForm_wrap__-lAyu\",\"button\":\"LoginForm_button__LodJg\",\"form_container\":\"LoginForm_form_container__A+e3j\"};","import { nanoid } from 'nanoid';\nimport css from 'components/LoginForm/LoginForm.module.css';\nimport { useDispatch } from \"react-redux\"\nimport { login } from 'store/operations';\n\n\nconst LoginForm = () => {\n\n\n    const dispatch = useDispatch();\n\n    const emailId = nanoid();\n    const passwordId = nanoid();\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        const form = event.currentTarget;\n\n        const user = {\n            email: form.elements.email.value,\n            password: form.elements.password.value,\n        };\n\n        dispatch(login(user));\n\n        form.reset();\n    };\n    return (\n        <div className={css.form_container}>\n            <div className={css.box}>\n\n\n\n                <form onSubmit={handleSubmit}>\n                    <div className={css.wrap}>\n                        <h4 className={css.title_input}>Email</h4>\n\n                        <input className={css.input} type=\"email\"\n                            name=\"email\"\n\n                            id={emailId}\n                            required\n                        />\n                    </div>\n                    <div className={css.wrap}>\n                        <h4 className={css.title_input}>Password</h4>\n\n                        <input className={css.input} type=\"text\"\n                            name=\"password\" id={passwordId}\n\n                            required />\n                    </div>\n\n                    <button className={css.button} type=\"submit\"> Log in</button>\n                </form>\n            </div>\n\n        </div>\n\n    )\n}\n\nexport default LoginForm;\n","import LoginForm from \"components/LoginForm/LoginForm\";\n\n\nconst Login = () => {\n    return (\n        <LoginForm />\n    )\n}\n\nexport default Login;","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["dispatch","useDispatch","emailId","nanoid","passwordId","_jsx","className","css","children","_jsxs","onSubmit","event","preventDefault","form","currentTarget","user","email","elements","value","password","login","reset","type","name","id","required","LoginForm","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}