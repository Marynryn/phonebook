{"version":3,"file":"static/js/656.0bf4175d.chunk.js","mappings":"kMACA,EAAwD,0BAAxD,EAAoI,kCAApI,EAAuL,qCAAvL,EAAoO,4BAApO,EAAuQ,2BAAvQ,EAA2S,6B,6BCsE3S,EAhEqB,WACjB,IAAMA,GAAWC,EAAAA,EAAAA,MACXC,GAASC,EAAAA,EAAAA,MACTC,GAAUD,EAAAA,EAAAA,MACVE,GAAaF,EAAAA,EAAAA,MAgBnB,OAEIG,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAmBC,UAE/BH,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAQC,UACpBC,EAAAA,EAAAA,MAAA,QAAMC,SApBG,SAACC,GAClBA,EAAMC,iBACN,IAAMC,EAAOF,EAAMG,cAEbC,EAAO,CAETC,KAAMH,EAAKI,SAASD,KAAKE,MACzBC,MAAON,EAAKI,SAASE,MAAMD,MAC3BE,SAAUP,EAAKI,SAASG,SAASF,OAGrCnB,GAASsB,EAAAA,EAAAA,IAASN,IAElBF,EAAKS,OACT,EAMyCd,SAAA,EACzBC,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAASC,SAAA,EACrBH,EAAAA,EAAAA,KAAA,MAAIC,UAAWC,EAAgBC,SAAC,UAChCH,EAAAA,EAAAA,KAAA,SAAOC,UAAWC,EACdgB,KAAK,OACLP,KAAK,OACLQ,QAAQ,2HACRC,MAAM,yIACNC,UAAQ,EACRC,GAAI1B,QAEZQ,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAASC,SAAA,EACrBH,EAAAA,EAAAA,KAAA,MAAIC,UAAWC,EAAgBC,SAAC,WAEhCH,EAAAA,EAAAA,KAAA,SAAOC,UAAWC,EAAWgB,KAAK,QAC9BP,KAAK,QAELW,GAAIxB,EACJuB,UAAQ,QAGhBjB,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAASC,SAAA,EACrBH,EAAAA,EAAAA,KAAA,MAAIC,UAAWC,EAAgBC,SAAC,cAEhCH,EAAAA,EAAAA,KAAA,SAAOC,UAAWC,EAAWgB,KAAK,OAC9BP,KAAK,WAAWW,GAAIvB,EAEpBsB,UAAQ,QAGhBrB,EAAAA,EAAAA,KAAA,UAAQC,UAAWC,EAAYgB,KAAK,SAAQf,SAAC,uBAOjE,EC3DA,EARiB,WAEb,OACIH,EAAAA,EAAAA,KAACuB,EAAY,GAGrB,C,wDCPO,IAkBI1B,EAAS,WAAH,IAAI2B,EAAIC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAAE,OAC5BG,OAAOC,gBAAgB,IAAIC,WAAWN,IAAOO,QAAO,SAACT,EAAIU,GAWvD,OAREV,IAFFU,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGV,GAAG,GAAG,C","sources":["webpack://react-homework-template/./src/components/RegisterForm/RegisterForm.module.css?a5d4","components/RegisterForm/RegisterForm.jsx","pages/Register/Register.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"RegisterForm_form__Tv43W\",\"box\":\"RegisterForm_box__vIBc8\",\"title\":\"RegisterForm_title__EvDyW\",\"title_input\":\"RegisterForm_title_input__jkQjH\",\"form_container\":\"RegisterForm_form_container__0k+ej\",\"input\":\"RegisterForm_input__FsgBz\",\"wrap\":\"RegisterForm_wrap__s+n3l\",\"button\":\"RegisterForm_button__B3hFq\"};","import { nanoid } from 'nanoid';\nimport css from 'components/RegisterForm/RegisterForm.module.css';\nimport { useDispatch } from \"react-redux\"\nimport { userPost } from 'store/operations';\n\n\n\nconst RegisterForm = () => {\n    const dispatch = useDispatch();\n    const nameId = nanoid();\n    const emailId = nanoid();\n    const passwordId = nanoid();\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        const form = event.currentTarget;\n\n        const user = {\n\n            name: form.elements.name.value,\n            email: form.elements.email.value,\n            password: form.elements.password.value,\n        };\n\n        dispatch(userPost(user));\n\n        form.reset();\n    };\n    return (\n\n        <div className={css.form_container}>\n\n            <div className={css.box}>\n                <form onSubmit={handleSubmit}>\n                    <div className={css.wrap}>\n                        <h2 className={css.title_input}>Name</h2>\n                        <input className={css.input}\n                            type=\"text\"\n                            name=\"name\"\n                            pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                            required\n                            id={nameId}\n                        /></div>\n                    <div className={css.wrap}>\n                        <h4 className={css.title_input}>Email</h4>\n\n                        <input className={css.input} type=\"email\"\n                            name=\"email\"\n\n                            id={emailId}\n                            required\n                        />\n                    </div>\n                    <div className={css.wrap}>\n                        <h4 className={css.title_input}>Password</h4>\n\n                        <input className={css.input} type=\"text\"\n                            name=\"password\" id={passwordId}\n\n                            required />\n                    </div>\n\n                    <button className={css.button} type=\"submit\">Registration</button>\n                </form>\n            </div>\n\n        </div>\n\n    )\n}\n\nexport default RegisterForm;\n\n\n\n","import RegisterForm from \"components/RegisterForm/RegisterForm\";\n\nconst Register = () => {\n\n    return (\n        <RegisterForm />\n\n    )\n}\n\nexport default Register;\n\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["dispatch","useDispatch","nameId","nanoid","emailId","passwordId","_jsx","className","css","children","_jsxs","onSubmit","event","preventDefault","form","currentTarget","user","name","elements","value","email","password","userPost","reset","type","pattern","title","required","id","RegisterForm","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}